{"version":3,"sources":["Context.js","Components/Contacts/Contact.js","Components/Contacts/Contacts.js","Components/layout/Header.js","Components/layout/TextInputGroup.js","Components/Contacts/AddContact.js","Components/Contacts/EditContact.js","Components/Pages/About.js","Components/Pages/NotFound.js","Components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payLoad","map","Provider","dispatch","setState","axios","get","res","this","data","console","log","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginright","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Test","title","body","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1106af7b.chunk.js","sourcesContent":["// Below mentioned example uses the Async method\r\nimport React, { Component } from \"react\";\r\n//import Contact from \"./Components/Contacts/Contact\";\r\nimport axios from \"axios\";\r\n//import Contacts from \"./Components/Contacts/Contacts\";\r\nconst Context = React.createContext();\r\n\r\n//CREATING DELETE_CONTACT;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payLoad\r\n        )\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payLoad, ...state.contacts]\r\n      };\r\n\r\n    case \"UPDATE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact.id === action.payLoad.id\r\n            ? (contact = action.payLoad)\r\n            : contact\r\n        )\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [],\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n  async componentDidMount() {\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n    this.setState({ contacts: res.data });\r\n    console.log(\"Comp did mount...in context.js\");\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"Component Did Update in context.js\");\r\n  }\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\n// Below mentioned examples uses the AXIOS method\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\n//import Contact from \"./Components/Contacts/Contact\";\r\nimport axios from \"axios\";\r\nconst Context = React.createContext();\r\n\r\n//CREATING DELETE_CONTACT;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payLoad\r\n        )\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payLoad, ...state.contacts]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [],\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(res => this.setState({ contacts: res.data }));\r\n    console.log(\"Comp did mount...in context.js\");\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"Component Did Update in context.js\");\r\n  }\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n*/\r\n/*\r\nimport React, { Component } from \"react\";\r\n//import Contact from \"./Components/Contacts/Contact\";\r\nconst Context = React.createContext();\r\n\r\n//CREATING DELETE_CONTACT;\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payLoad\r\n        )\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payLoad, ...state.contacts]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        id: 1,\r\n        name: \"John Doe\",\r\n        email: \"jdoe@gmail.com\",\r\n        phone: \"555-444-555\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Karen Smith\",\r\n        email: \"ksmith@gmail.com\",\r\n        phone: \"444-333-555\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Amarjit Thakur\",\r\n        email: \"athakur@gmail.com\",\r\n        phone: \"222-333-444\"\r\n      }\r\n    ],\r\n    dispatch: action => {\r\n      this.setState(state => reducer(state, action));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n*/\r\n","// This below examples uses the Async method\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import \"./Contact.css\"; removed\r\nimport { Consumer } from \"../../Context\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  //onDeleteClick = () => {console.log(\"clicked\");\r\n  onDeleteClick = async (id, dispatch) => {\r\n    try {\r\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n      dispatch({ type: \"DELETE_CONTACT\", payLoad: id });\r\n    } catch (e) {\r\n      dispatch({ type: \"DELETE_CONTACT\", payLoad: id });\r\n    }\r\n  };\r\n  render() {\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <h1>\r\n                {name}\r\n                <i\r\n                  onClick={() =>\r\n                    this.setState({\r\n                      showContactInfo: !this.state.showContactInfo\r\n                    })\r\n                  }\r\n                  className=\"fas fa-sort-down\"\r\n                  style={{ cursor: \"Pointer\" }}\r\n                />\r\n\r\n                <i\r\n                  className=\"fas fa-times\"\r\n                  style={{ cursor: \"Pointer\", float: \"right\", color: \"red\" }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                />\r\n                <Link to={`contact/edit/${id}`}>\r\n                  <i\r\n                    className=\"fas fa-pencil-alt\"\r\n                    style={{\r\n                      cursor: \"Pointer\",\r\n                      float: \"right\",\r\n                      color: \"black\",\r\n                      marginright: \"1rem\"\r\n                    }}\r\n                  ></i>\r\n                </Link>\r\n              </h1>\r\n              {showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Email:{email}</li>\r\n                  <li className=\"list-group-item\">Phone:{phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n\r\n//This example is with axios method\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import \"./Contact.css\"; removed\r\nimport { Consumer } from \"../../Context\";\r\nimport axios from \"axios\";\r\n\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  //onDeleteClick = () => {console.log(\"clicked\");\r\n  onDeleteClick = (id, dispatch) => {\r\n    axios\r\n      .delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n      .then(res => dispatch({ type: \"DELETE_CONTACT\", payLoad: id }));\r\n  };\r\n\r\n  render() {\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-3\">\r\n              <h1>\r\n                {name}\r\n                <i\r\n                  onClick={() =>\r\n                    this.setState({\r\n                      showContactInfo: !this.state.showContactInfo\r\n                    })\r\n                  }\r\n                  className=\"fas fa-sort-down\"\r\n                  style={{ cursor: \"Pointer\" }}\r\n                />\r\n\r\n                <i\r\n                  className=\"fas fa-times\"\r\n                  style={{ cursor: \"Pointer\", float: \"right\", color: \"red\" }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                />\r\n              </h1>\r\n              {showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Email:{email}</li>\r\n                  <li className=\"list-group-item\">Phone:{phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/// CONTEXT REDUCERS AND ACTIONS\r\n\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    deleteClickHandler: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  //onDeleteClick = () => {console.log(\"clicked\");\r\n  onDeleteClick = () => {\r\n    this.props.deleteClickHandler();\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={() =>\r\n              this.setState({ showContactInfo: !this.state.showContactInfo })\r\n            }\r\n            className=\"fas fa-sort-down\"\r\n            style={{ cursor: \"Pointer\" }}\r\n          />\r\n\r\n          <i\r\n            className=\"fas fa-times\"\r\n            style={{ cursor: \"Pointer\", float: \"right\", color: \"red\" }}\r\n            onClick={this.onDeleteClick}\r\n          />\r\n        </h1>\r\n        {showContactInfo ? (\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">Email:{email}</li>\r\n            <li className=\"list-group-item\">Phone:{phone}</li>\r\n          </ul>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n// TO TOGGLE EMAIL AND PHONE\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={() =>\r\n              this.setState({ showContactInfo: !this.state.showContactInfo })\r\n            }\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n        {showContactInfo ? (\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">Email:{email}</li>\r\n            <li className=\"list-group-item\">Phone:{phone}</li>\r\n          </ul>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\n// CHANGING THE STATE OF EVENTS IN REACT-TOGGLE\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  render() {\r\n    const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {contact.name}\r\n          <i\r\n            onClick={() =>\r\n              this.setState({ showContactInfo: !this.state.showContactInfo })\r\n            }\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{contact.email}</li>\r\n          <li className=\"list-group-item\">Phone:{contact.phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\n// CHANGING THE STATE OF EVENTS IN REACT\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = { showContactInfo: true };\r\n\r\n  onShowClick = e => {\r\n    // this.setState({ showContactInfo: false });\r\n    this.setState({ showContactInfo: !this.state.showContactInfo });\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={this.onShowClick.bind(this)}\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n  };\r\n\r\n  state = {};\r\n  onShowClick = (name, phone, e) => {\r\n    console.log(name, phone);\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={this.onShowClick.bind(this, name, phone)}\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\n// this code below has a fault\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.string.isRequired\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n    this.onShowClick = this.onShowClick(this);\r\n  }\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={this.onShowClick(this)}\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.string.isRequired\r\n  };\r\n  state = {};\r\n  onShowClick() {\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={this.onShowClick.bind(this)}\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i\r\n            onClick={() => console.log(\"Hello!\")}\r\n            className=\"fa fa-sort-down\"\r\n          />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>\r\n          {name}\r\n          <i className=\"fa fa-sort-down\" />\r\n        </h1>\r\n\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    contact: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>{name}</h1>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    //const{name,email,phone}=this.props;\r\n    //const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>{name}</h1>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{email}</li>\r\n          <li className=\"list-group-item\">Phone:{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    phone: PropTypes.string.isRequired\r\n  };\r\n\r\n  render() {\r\n    //const{name,email,phone}=this.props;\r\n    const { contact } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h1>{contact.name}</h1>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email:{contact.email}</li>\r\n          <li className=\"list-group-item\">Phone:{contact.phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n//eg 3\r\n\r\n/*\r\nclass Contact extends Component {\r\n  static propTypes = {\r\n    name: propTypes.string.isRequired,\r\n    email: propTypes.string.isRequired,\r\n    phone: propTypes.string.isRequired\r\n  };\r\n  render() {\r\n    const { name, email, phone } = this.props;\r\n    return (\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul>\r\n          <li>Email:{email}</li>\r\n          <li>Phone:{phone}}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n  */\r\n\r\n/*  \r\nclass Contact extends Component {\r\n  render() {\r\n    const { name, email, phone } = this.props;\r\n    return (\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul>\r\n          <li>Email:{email}</li>\r\n          <li>Phone:{phone}}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  name: propTypes.string.isRequired,\r\n  email: propTypes.string.isRequired,\r\n  phone: propTypes.string.isRequired\r\n};\r\nexport default Contact;\r\n*/\r\n//eg 2\r\n/*\r\nclass Contact extends Component {\r\n  render() {\r\n    const { name, email, phone } = this.props;\r\n    return (\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul>\r\n          <li>Email:{email}</li>\r\n          <li>Phone:{phone}}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n\r\n//eg 1\r\n/*\r\nclass Contact extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4>{this.props.name}</h4>\r\n        <ul>\r\n          <li>Email:{this.props.email}</li>\r\n          <li>Phone:{this.props.phone}}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contact;\r\n*/\r\n","import Contact from \"./Contact\";\r\nimport React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\n\r\n/// CONTEXT REDUCERS AND ACTIONS\r\n\r\nclass Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              <h1 className=\"display-4 mb-2\">\r\n                <span className=\"text-danger\">Contacts List</span>\r\n              </h1>\r\n              {contacts.map(contact => (\r\n                <Contact key={contact.id} contact={contact} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n\r\n/*\r\nclass Contacts extends Component {\r\n  deleteContact = id => {\r\n    const { contacts } = this.state;\r\n    const newContacts = contacts.filter(contact => contact.id !== id);\r\n    this.setState({ contacts: newContacts });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              {contacts.map(contact => (\r\n                <Contact\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  deleteClickHandler={this.deleteContact.bind(this, contact.id)}\r\n                />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n*/\r\n\r\n// previous return staement deleted\r\n/*\r\n    return (\r\n      <div>\r\n        <React.Fragment>\r\n          {contacts.map(contact => (\r\n            <Contact\r\n              key={contact.id}\r\n              contact={contact}\r\n              deleteClickHandler={this.deleteContact.bind(this, contact.id)}\r\n              // deleteClickHandler={this.deleteContact}\r\n              // name={contact.name}\r\n              //email={contact.email}\r\n              //phone={contact.phone}\r\n            />\r\n          ))}\r\n        </React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n*/\r\n/*\r\nclass Contacts extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        id: 1,\r\n        name: \"John Doe\",\r\n        email: \"jdoe@gmail.com\",\r\n        phone: \"555-444-555\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Karen Smith\",\r\n        email: \"ksmith@gmail.com\",\r\n        phone: \"444-333-555\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Amarjit Thakur\",\r\n        email: \"athakur@gmail.com\",\r\n        phone: \"222-333-444\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  render() {\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div>\r\n        {contacts.map(contact => (\r\n          <Contact\r\n            key={contact.id.email}\r\n            contact={contact}\r\n\r\n            // name={contact.name}\r\n            //email={contact.email}\r\n            //phone={contact.phone}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n*/\r\n/*\r\nclass Contacts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Contacts: [\r\n        {\r\n          id: 1,\r\n          name: \"John Doe\",\r\n          email: \"jdoe@gmail.com\",\r\n          phone: \"555-444-555\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Karen Smith\",\r\n          email: \"ksmith@gmail.com\",\r\n          phone: \"444-333-555\"\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Amarjit Thakur\",\r\n          email: \"athakur@gmail.com\",\r\n          phone: \"222-333-444\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n  render() {\r\n    const { Contacts } = this.state;\r\n    return (\r\n      <div>\r\n        {Contacts.map(Contact => (\r\n          <Contact\r\n            key={Contact.id}\r\n            name={Contact.name}\r\n            email={Contact.email}\r\n            phone={Contact.phone}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n*/\r\n/*\r\nclass Contacts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      Contacts: [\r\n        {\r\n          id: 1,\r\n          name: \"John Doe\",\r\n          email: \"jdoe@gmail.com\",\r\n          phone: \"555-444-555\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Karen Smith\",\r\n          email: \"ksmith@gmail.com\",\r\n          phone: \"444-333-555\"\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Amarjit Thakur\",\r\n          email: \"athakur@gmail.com\",\r\n          phone: \"222-333-444\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n  render() {\r\n    const { Contacts } = this.state;\r\n    return (\r\n      <div>\r\n        {Contacts.map(Contact => (\r\n          <h1>{Contact.name}</h1>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n*/\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-soft bg-danger mb-3 py--0\">\r\n      <div>\r\n        <div className=\"container\">\r\n          <a href=\"\\\" className=\"navbar-brand\">\r\n            {branding}\r\n          </a>\r\n\r\n          <ul className=\"navbar-nav  mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"fas fa-home\" />\r\n                HOME\r\n              </Link>\r\n              <Link to=\"/Contact/add\" className=\"nav-link\">\r\n                <i className=\"fas fa-plus\" />\r\n                Add\r\n              </Link>\r\n\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                <i className=\"fas fa-question\" />\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nHeader.propTypes = { branding: \"My App\" };\r\nHeader.propTypes = { branding: propTypes.string.isRequired };\r\n\r\n//const headStyle = { color: \"Red\", fontSize: \"50px\" };\r\n\r\nexport default Header;\r\n\r\n/*\r\nimport React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-soft bg-danger mb-3 py--0\">\r\n      <div>\r\n        <div className=\"container\">\r\n          <a href=\"\\\" className=\"navbar-brand\">\r\n            {branding}\r\n          </a>\r\n\r\n          <ul className=\"navbar-nav  mr-auto\">\r\n            <li className=\"Nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                HOME\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nHeader.propTypes = { branding: \"My App\" };\r\nHeader.propTypes = { branding: propTypes.string.isRequired };\r\n\r\n//const headStyle = { color: \"Red\", fontSize: \"50px\" };\r\n\r\nexport default Header;\r\n*/\r\n/*\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      <h1 style={headStyle}>{branding}</h1>\r\n    </div>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nHeader.propTypes = { branding: \"My App\" };\r\nHeader.propTypes = { branding: propTypes.string.isRequired };\r\n\r\nconst headStyle = { color: \"Red\", fontSize: \"50px\" };\r\n\r\nexport default Header;\r\n*/\r\n/*\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      <h1 style={{ color: \"red\", fontSize: \"50px\" }}>{branding}</h1>\r\n    </div>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nHeader.propTypes = { branding: \"My App\" };\r\nHeader.propTypes = { branding: propTypes.string.isRequired };\r\n\r\nexport default Header;\r\n*/\r\n/*\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      <h1>{branding}</h1>\r\n    </div>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nHeader.propTypes = { branding: \"My App\" };\r\nHeader.propTypes = { branding: propTypes.string.isRequired };\r\n\r\nexport default Header;\r\n*/\r\n/*\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      <h1>{branding}</h1>\r\n    </div>\r\n  );\r\n};\r\nHeader.defaultProps = { branding: \"My App\" };\r\nexport default Header;\r\n*/\r\n// eg 1\r\n\r\n/*\r\nconst Header = props => {\r\n  return (\r\n    <div>\r\n      <h1>{props.branding}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n*/\r\n//export default () => {\r\n/*    \r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1>{Contact Manager</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n*/\r\n/*\r\nfunction Header(){\r\n    return(\r\n        <div>\r\n        <h1> Contact Manager</h1>\r\n        </div>\r\n    );\r\n} */\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        className={classnames(\" form-control form-control-lg\", {\r\n          \"is-invalid\": error\r\n        })}\r\n        placeholder={placeholder}\r\n        onChange={onChange}\r\n        value={value}\r\n      />\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\nTextInputGroup.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  error: PropTypes.string\r\n};\r\nTextInputGroup.defaultProps = {\r\n  type: \"text\"\r\n};\r\n\r\nexport default TextInputGroup;\r\n","// This below example uses Async method\r\nimport React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required \" } });\r\n      return;\r\n    }\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n    const res = await axios.post(\r\n      \"http://jsonplaceholder.typicode.com/users\",\r\n      newContact\r\n    );\r\n    dispatch({ type: \"ADD_CONTACT\", payLoad: res.data });\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact </div>\r\n\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone...\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"Submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-large btn-dark\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default AddContact;\r\n\r\n//This below example uses axios method\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  onSubmit = (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required \" } });\r\n      return;\r\n    }\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n    axios\r\n      .post(\"http://jsonplaceholder.typicode.com/users\", newContact)\r\n      .then(res => dispatch({ type: \"ADD_CONTACT\", payLoad: res.data }));\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact </div>\r\n\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeHolder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    placeHolder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeHolder=\"Enter Phone...\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"Submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-large btn-dark\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default AddContact;\r\n*/\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport uuid from \"uuid\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  onSubmit = (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required \" } });\r\n      return;\r\n    }\r\n    const newContact = {\r\n      id: uuid(),\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    dispatch({ type: \"ADD_CONTACT\", payLoad: newContact });\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact </div>\r\n\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeHolder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    placeHolder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeHolder=\"Enter Phone...\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"Submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-large btn-dark\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default AddContact;\r\n*/\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\n\r\nimport uuid from \"uuid\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\"\r\n  };\r\n\r\n  onSubmit = (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    const newContact = {\r\n      id: uuid(),\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    dispatch({ type: \"ADD_CONTACT\", payLoad: newContact });\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"Card mb-3\">\r\n              <div className=\"Card-header\">Add Contact </div>\r\n\r\n              <div className=\"Card-body\">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      className=\"form-control form-control-lg\"\r\n                      placeholder=\"Enter Name...\"\r\n                      onChange={this.onChange}\r\n                      value={name}\r\n                      // style={{ cursor: \"Pointer\" }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      className=\"form-control form-control-lg\"\r\n                      placeholder=\"Enter Email...\"\r\n                      onChange={this.onChange}\r\n                      value={email}\r\n                      //style={{ cursor: \"Pointer\" }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"phone\">Phone</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"phone\"\r\n                      className=\"form-control form-control-lg\"\r\n                      placeholder=\"Enter Phone... \"\r\n                      onChange={this.onChange}\r\n                      value={phone}\r\n                      //style={{ cursor: \"Pointer\" }}\r\n                    />\r\n                  </div>\r\n                  <input\r\n                    type=\"Submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-large btn-dark\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default AddContact;\r\n*/\r\n/*\r\n\r\n    return (\r\n      <div className=\"Card mb-3\">\r\n        <div className=\"Card-header\">Add Contact </div>\r\n\r\n        <div className=\"Card-body\">\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Name...\"\r\n                onChange={this.onChange}\r\n                value={name}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Email...\"\r\n                onChange={this.onChange}\r\n                value={email}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"phone\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Phone... \"\r\n                onChange={this.onChange}\r\n                value={phone}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <input\r\n              type=\"Submit\"\r\n              value=\"Add Contact\"\r\n              className=\"btn btn-lg btn-dark\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport {Consumer} from '../../Context';\r\n\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\"\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  //onEmailChange = e => this.setState({ email: e.target.value });\r\n  //onPhoneChange = e => this.setState({ phone: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone } = this.state;\r\n\r\n    return (\r\n      <div className=\"Card mb-3\">\r\n        <div className=\"Card-header\">Add Contact </div>\r\n\r\n        <div className=\"Card-body\">\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Name...\"\r\n                onChange={this.onChange}\r\n                value={name}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Email...\"\r\n                onChange={this.onChange}\r\n                value={email}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"phone\"\r\n                className=\"form-control form=control-lg\"\r\n                placeholder=\"Enter Phone... \"\r\n                onChange={this.onChange}\r\n                value={phone}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <input\r\n              type=\"Submit\"\r\n              value=\"Add Contact\"\r\n              className=\"btn btn-lg btn-dark\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n*/\r\n/*\r\n// CREATING CODE TO MAKE A SUBMIT FORM\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\"\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n  };\r\n\r\n  //onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  onNameChange = e => this.setState({ name: e.target.value });\r\n  onEmailChange = e => this.setState({ email: e.target.value });\r\n  \r\n  onPhoneChange = e => this.setState({ phone: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone } = this.state;\r\n    return (\r\n      <div className=\"Card mb-3\">\r\n        <div className=\"Card-header\">Add Contact </div>\r\n\r\n        <div className=\"Card-body\">\r\n          <form onSubmit={this.onSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                className=\"form-control form-control-lg\"\r\n                placeholder=\"Enter Name...\"\r\n                onChange={this.onNameChange}\r\n                // onChange={this.onChange}\r\n                value={name}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className=\"form-control form-control-lg\"\r\n                placeholder=\"Enter Email...\"\r\n                onChange={this.onEmailChange}\r\n                //onChange={this.onChange}\r\n                value={email}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"phone\"\r\n                className=\"form-control form-control-lg\"\r\n                placeholder=\"Enter Phone... \"\r\n                onChange={this.onPhoneChange}\r\n                //onChange={this.onChange}\r\n                value={phone}\r\n                style={{ cursor: \"Pointer\" }}\r\n              />\r\n            </div>\r\n            <input\r\n              type=\"Submit\"\r\n              value=\"Add Contact\"\r\n              className=\"btn btn-lg btn-dark\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n*/\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../Context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n\r\n    const contact = res.data;\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone\r\n    });\r\n    console.log(\"component did mount in Edit Contact..\");\r\n  }\r\n\r\n  onSubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n    if (name === \"\") {\r\n      this.setState({ errors: { name: \"Name is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (email === \"\") {\r\n      this.setState({ errors: { email: \"Email is required \" } });\r\n      return;\r\n    }\r\n\r\n    if (phone === \"\") {\r\n      this.setState({ errors: { phone: \"Phone is required \" } });\r\n      return;\r\n    }\r\n\r\n    const updContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    const { id } = this.props.match.params;\r\n\r\n    const res = await axios.put(\r\n      `http://jsonplaceholder.typicode.com/users/${id}`,\r\n      updContact\r\n    );\r\n\r\n    dispatch({ type: \"UPDATE_CONTACT\", payLoad: res.data });\r\n\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Edit Contact </div>\r\n\r\n              <div className=\"card-body \">\r\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChange}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChange}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone...\"\r\n                    value={phone}\r\n                    onChange={this.onChange}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"Submit\"\r\n                    value=\"Update Contact\"\r\n                    className=\"btn btn-large btn-dark\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default EditContact;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About Contact Manager</h1>\r\n      <p className=\"lead\">Simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n//\"homepage\": \"https://github.com/amarjitthakur/contactmanager.git\",\r\n\r\n/*\r\nimport React from \"react\";\r\n\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">{props.match.params.id}</h1>\r\n      <p className=\"lead\">Simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n/*\r\nimport React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">About Contact Manager</h1>\r\n      <p className=\"lead\">Simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n*/\r\n/*\r\n#dependencies\r\n/node_modules\r\n/.pnp\r\n.pnp.js\r\n\r\n# testing\r\ncoverage\r\n\r\n# production\r\nbuild\r\n\r\n# misc\r\n.DS_Store\r\n.env.local\r\n.env.development.local\r\n.env.test.local\r\n.env.production.local\r\n\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\n\r\n*/\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className=\"text-danger\">404</span>Page Not Found\r\n      </h1>\r\n\r\n      <p className=\"lead\">Sorry,that page does not exist</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass Test extends Component {\r\n  state = {\r\n    title: \"\",\r\n    body: \"\"\r\n    //completed: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          title: data.title,\r\n          body: data.body\r\n          //    completed: data.completed\r\n        })\r\n      );\r\n    console.log(\"Comp did mount...in Test.js\");\r\n  }\r\n  /*\r\n  componentWillMount() {\r\n    console.log(\"Component Will Mount...\");\r\n  }\r\n  \r\n  componentDidMount() {\r\n    console.log(\"Component Did Mount...\");\r\n  }\r\n  \r\n  UNSAFE_componentDidUpdate() {\r\n    console.log(\"Component Did Update\");\r\n  }\r\n  /*\r\n\r\n  componentWillUpdate() {\r\n    console.log(\"Component Will Update\");\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps, nextState) {\r\n    console.log(\"Componenet wil receive...\");\r\n  }\r\n\r\n  static getDerivedStateFromPages(nextProps, nextState) {\r\n    console.log(\"Component wll get Derived state from pages... \");\r\n  }\r\n*/\r\n  render() {\r\n    const { title, body } = this.state;\r\n    return (\r\n      <div>\r\n        <h1> {title}</h1>\r\n        <p>{body}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//<p>{completed}</p>\r\nexport default Test;\r\n","import React from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\n//import \"./index.css\";\nimport Contacts from \"./Components/Contacts/Contacts\";\nimport Header from \"./Components/layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"./Context\";\n//import AddContact from \"./Components/Contacts/AddContactRef\";\nimport AddContact from \"./Components/Contacts/AddContact\";\nimport EditContact from \"./Components/Contacts/EditContact\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport About from \"./Components/Pages/About\";\nimport NotFound from \"./Components/Pages/NotFound\";\nimport Test from \"./Components/test/Test\";\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"Container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/Contact/add\" component={AddContact} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n//<Route exact path=\"/test\" component={Test} />\n//<Route component={NotFound} />\nexport default App;\n\n/*\nimport React from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\n//import \"./index.css\";\nimport Contacts from \"./Components/Contacts/Contacts\";\nimport Header from \"./Components/layout/Header\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"./Context\";\n//import AddContact from \"./Components/Contacts/AddContactRef\";\nimport AddContact from \"./Components/Contacts/AddContact\";\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        \n        <div className=\"App\">\n          <Header branding=\"Contact Manager\" />\n          <div className=\"Container\">\n            <AddContact />\n            <Contacts />\n          </div>\n        </div>\n        \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n*/\n/*\n//eg 1,2\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        <Contact name=\"John Doe\" email=\"jdoe@gmail.com\" phone=\"555-444-555\" />\n        <Contact\n          name=\"Karen Smith\"\n          email=\"ksmith@gmail.com\"\n          phone=\"333-444-222\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n//branding=\"Contact Hd Manager\" */\n/*\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>The App Component</h1>\n        <Contact />\n        <Contact />\n        <Contact />\n      </div>\n*/\n/*\nclass App extends React.Component {\n  render() {\n    const showMath = true;\n    const num1 = 40;\n    const num2 = 30;\n    let math;\n    if (showMath) {\n      math = (\n        <h4>\n          {num1}+{num2}={num1 + num2}\n        </h4>\n      );\n    } else {\n      math = null;\n    }\n    return (\n      <div className=\"App\">\n        <h1>The App Component</h1>\n        {math}\n      </div>\n*/\n/*\n    const show \n    Math = true;\n    let math;\n\n    if (showMath) {\n      math = <h4> 4+1={4 + 1}</h4>;\n    } else {\n      math = null;\n    }\n    return (\n      <div className=\"App\">\n        <h1> The App Component</h1>\n        {math}\n      </div>\n*/\n/*\n    const name = \"Amarjit\";\n    const showHello = true;\n    return (\n      <div className=\"App\">\n        {showHello ? <h1> Hello{name.toUpperCase()}</h1> : null}\n      </div>\n*/\n/*\n      <div className=\"App\">\n        <h4> 1+1={1 + 1}</h4>\n      </div>\n      \n      <div>\n        <div className=\"App\">\n          <h1>Hello How are you?{name.toUpperCase()}</h1>\n        </div>\n\n        <div className=\"App-header\">\n          <h1>This is a Header{name}</h1>\n          <body>amamamam</body>\n        </div>\n\n        <div className=\"body\">\n          <h1>This is in the body,{name}</h1>\n          <body>some text.... amamamam</body>\n        </div>\n      </div>\n*/\n/*\n      <div className=\"App\">\n       <h1>Hello Hi How are you?{name}</h1>\n      </div>\n*/\n/*\n<div>\n          <div className=\"App\">\n          <h1>The App Component</h1>\n        </div>\n        <div> Hello ,how are you?</div>\n  </div>*/\n/*\nreturn React.createElement(\n  'div',\n  {className='App'},\n  React.createElement('h1',null,'The App Componet')\n);\n  \n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}